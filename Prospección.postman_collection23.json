{
	"info": {
		"_postman_id": "3c342850-ee8c-4b46-9632-b9df14f5937b",
		"name": "Prospección",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Datos Basicos INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"ID_INDIVIDUO\", jsonResponse.data.id_individuo);\r",
							"pm.environment.set(\"ID_PROCESO_VENTA\", jsonResponse.data.id_proceso_venta);\r",
							"\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Tipos Contacto INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2\r",
							"pm.test(\"2. Validación: El objeto data contenga 2 arreglos.\", function()\r",
							"{\r",
							"    var count = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"count: \" + count);\r",
							"   pm.expect(count).to.eql(2);    \r",
							"\r",
							"   pm.expect({direccion_registrada:[] }).to.have.all.keys('direccion_registrada');    \r",
							"\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: Los datos del campo direccion_registrada sean correctos\", function()\r",
							"{    \r",
							"    console.log(\"dat: \", jsonResponse.data.direccion_registrada[0])\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].calle).to.be.a(\"string\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].entreCalle1).to.be.a(\"string\" || \"null\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].entreCalle2).to.be.a(\"string\" || \"null\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].id).to.be.a(\"string\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idCiudadLocalidad).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idCodigoPostal).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idColonia).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idDelegacionMunicipio).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idEntidadFederativa).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idPais).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idTipo).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].indActivo).to.eql(true);\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].latitud).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].longitud).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].noExterior).to.be.a(\"string\" || \"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].noInterior).to.be.a(\"string\" || \"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].referenciaUbicacion).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El Tipo de dato sea number en el campo id_persona\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_persona)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_persona).to.be.a(\"number\")\r",
							"});\r",
							"//5.\r",
							"pm.test(\"5. Validación: Longitud correcta del campo id_persona\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_persona + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(9);        \r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El campo id_persona contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_persona).to.eql(pm.variables.get(\"ID_PERSONA\"))\r",
							"\r",
							"});\r",
							"\r",
							"//7.\r",
							"pm.test(\"7. Validación: Mensaje correcto en el campo message\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.message).to.eql(\"DATOS PROCESADOS CORRECTAMENTE\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"primer_nombre\": \"{{NOMBRE}}\",\r\n    \"segundo_nombre\": \"{{SEGUNDO_NOMBRE}}\",\r\n    \"primer_apellido\": \"{{PRIMER_APELLIDO}}\",\r\n    \"segundo_apellido\": \"{{SEGUNDO_APELLIDO}}\",\r\n    \"correo\": \"\",\r\n    \"acepta_aviso_privacidad\": true,\r\n    \"verifica_telefono\": true,\r\n    \"id_tipo_telefono\": 10.1,\r\n    \"telefono\": \"{{TELEFONO}}\",\r\n    \"id_canal_entrada\": 7,\r\n    \"id_medios_digitales\": \"\",\r\n    \"id_tipo_correo\": 0,\r\n    \"id_red_social\": 0,\r\n    \"id_tipo_notificacion\": 14.1,\r\n    \"usuario_red_social\": \"\",\r\n    \"version_aviso_privacidad\": \"1.0\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/complementar-informacion/pld-pep?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"complementar-informacion",
						"pld-pep"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tipos Contacto INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"ID_FOLIO\", jsonResponse.data.id_folio);\r",
							"\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Datos Complementarios INT');\r",
							"\r",
							"// *******   T E S T S ****** //\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El Objeto DATA contenga 2 campos\", function()\r",
							"{\r",
							"    var count = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"count: \" + count);\r",
							"    pm.expect(count).to.eql(2);\r",
							"    //pm.expect(individuo).to.eql(5);  \r",
							"\r",
							"    pm.expect({detalle: String, id_folio: Number}).to.have.all.keys('detalle', 'id_folio');    \r",
							"\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El Tipo de dato sea string en el campo detalle\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.detalle)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.detalle).to.be.a(\"string\")\r",
							"\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El texto del campo detalle sea ok\", function()\r",
							"{   \r",
							"    \r",
							"    pm.expect(jsonResponse.data.detalle).to.eql(\"ok\")\r",
							"\r",
							"});\r",
							"\r",
							"//5.\r",
							"pm.test(\"5. Validación: El Tipo de dato sea numero en el campo ID_FOLIO\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_folio)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_folio).to.be.a(\"number\")\r",
							"\r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El campo id_folio contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_folio).to.eql(pm.variables.get(\"ID_FOLIO\"))\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"//7 .\r",
							"pm.test(\"7. Validación: Longitud correcta del campo ID_FOLIO\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_folio + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(7);        \r",
							"});\r",
							"\r",
							"//8. \r",
							"pm.test(\"8. Validación: El campo message contenga el mensaje correcto\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.message).to.eql(\"ASISTIDO, CITA CON CALL CENTER REGISTRADO EXITOSAMENTE, NOTIFICAR EN PANTALLA A USUARIO\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_individuo\": {{ID_INDIVIDUO}},\r\n    \"id_proceso_venta\": {{ID_PROCESO_VENTA}},\r\n    \"id_tipo_atencion\": 15.2,\r\n    \"id_horario_atencion\": 16.1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/tipo-contacto?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"tipo-contacto"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Datos Complementarios INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"ID_PERSONA\", jsonResponse.data.id_persona);\r",
							"\r",
							"setTimeout(() => {}, 30000)\r",
							"postman.setNextRequest('Datos Segmentacion INT');\r",
							"\r",
							"// *******   T E S T S ****** //\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El Objeto DATA contenga 3 campos.\", function()\r",
							"{\r",
							"    var count = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"count: \" + count);\r",
							"    pm.expect(count).to.eql(3);    \r",
							"\r",
							"    pm.expect({curp_validado: Boolean, id_individuo: Number, id_persona: Number}).to.have.all.keys('curp_validado', 'id_individuo', 'id_persona');    \r",
							"\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El campo curp_validado contenga la bandera true.\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.curp_validado).to.eql(true);\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El Tipo de dato sea number en el campo id_individuo\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_individuo)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_individuo).to.be.a(\"number\")\r",
							"});\r",
							"//5.\r",
							"pm.test(\"5. Validación: Longitud correcta del campo id_individuo\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_individuo + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(5);        \r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El campo id_individuo contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"//7.\r",
							"pm.test(\"7. Validación: El Tipo de dato sea number en el campo id_persona\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_persona)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_persona).to.be.a(\"number\")\r",
							"});\r",
							"//8.\r",
							"pm.test(\"8. Validación: Longitud correcta del campo id_persona\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_persona + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(9);        \r",
							"});\r",
							"\r",
							"//9.\r",
							"pm.test(\"9. Validación: El campo id_persona contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_persona).to.eql(pm.variables.get(\"ID_PERSONA\"))\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"10. Validación: Mensaje correcto en el campo message\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.message).to.eql(\"DATOS PROCESADOS CORRECTAMENTE, PEDIR DATOS DE SEGMENTACION\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_individuo\": {{ID_INDIVIDUO}},\r\n    \"primer_nombre\": \"{{NOMBRE}}\",\r\n    \"segundo_nombre\": \"{{SEGUNDO_NOMBRE}}\",\r\n    \"primer_apellido\": \"{{PRIMER_APELLIDO}}\",\r\n    \"segundo_apellido\": \"{{SEGUNDO_APELLIDO}}\",\r\n    \"telefonos\": [\r\n        {\r\n            \"id_tipo_telefono\": 10.1,\r\n            \"telefono\": \"{{TELEFONO}}\",\r\n            \"ind_telefono_validado\": \"\"\r\n        },\r\n        {\r\n            \"id_tipo_telefono\": 10.2,\r\n            \"telefono\": \"\",\r\n            \"ind_telefono_validado\": \"\"\r\n        }\r\n    ],\r\n    \"fecha_nacimiento\": \"{{FECHA_NACIMIENTO}}\",\r\n    \"id_entidad_federativa_nacimiento\": \"{{ENTIDAD_FEDERATIVA}}\",\r\n    \"id_genero\": {{GENERO}},\r\n    \"rfc\": \"{{RFC}}\",\r\n    \"id_estado_civil\": 5.2,\r\n    \"homoclave\": \"\",\r\n    \"id_pais_nacimiento\": 22.1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/datos-complementarios?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"datos-complementarios"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Datos Segmentacion INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 30000)\r",
							"postman.setNextRequest('Complementar Informacion INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El Objeto DATA contenga 4 campos.\", function()\r",
							"{\r",
							"    var count = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"count: \" + count);\r",
							"    pm.expect(count).to.eql(4);    \r",
							"\r",
							"   pm.expect({id_folio: Number, id_individuo: Number, id_persona: Number, oferta:{}}).to.have.all.keys('id_folio', 'id_individuo', 'id_persona', 'oferta');    \r",
							"\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El Tipo de dato sea number en el campo id_folio\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_folio)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_folio).to.be.a(\"number\")\r",
							"\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El campo id_folio contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_folio).to.eql(pm.variables.get(\"ID_FOLIO\"))\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"//5\r",
							"pm.test(\"5. Validación: Longitud correcta del campo id_folio\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_folio + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(7);        \r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El Tipo de dato sea number en el campo id_individuo\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_individuo)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_individuo).to.be.a(\"number\")\r",
							"});\r",
							"//7.\r",
							"pm.test(\"7. Validación: Longitud correcta del campo id_individuo\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_individuo + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(5);        \r",
							"});\r",
							"\r",
							"//8.\r",
							"pm.test(\"8. Validación: El campo id_individuo contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"//9.\r",
							"pm.test(\"9. Validación: El Tipo de dato sea number en el campo id_persona\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_persona)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_persona).to.be.a(\"number\")\r",
							"});\r",
							"//10.\r",
							"pm.test(\"10. Validación: Longitud correcta del campo id_persona\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_persona + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(9);        \r",
							"});\r",
							"\r",
							"//11.\r",
							"pm.test(\"11. Validación: El campo id_persona contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_persona).to.eql(pm.variables.get(\"ID_PERSONA\"))\r",
							"\r",
							"});\r",
							"\r",
							"//12.\r",
							"pm.test(\"12. Validación: El campo codigo_respuesta sea 200\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.oferta.codigo_respuesta).to.eql(\"200\");\r",
							"});\r",
							"\r",
							"//13.\r",
							"pm.test(\"13. Validación: El campo descripcion_respuesta contenga el mensaje correcto\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.oferta.descripcion_respuesta).to.eql(\"Oferta ejecutada con éxito\");\r",
							"});\r",
							"\r",
							"//14.\r",
							"pm.test(\"14. Validación: El campo Id_familia_Producto contenga información correcta\", function()\r",
							"{\r",
							"    console.log(\"Id_familia_Producto: \" + jsonResponse.data.oferta.familia_viables[0].Id_familia_Producto)\r",
							"    pm.expect(jsonResponse.data.oferta.familia_viables[0].Id_familia_Producto).to.eql(6);\r",
							"});\r",
							"\r",
							"//15.\r",
							"pm.test(\"15. Validación: El campo Subfamila_productos contenga información correcta\", function()\r",
							"{\r",
							"    console.log(\"Subfamila_productos: \" + jsonResponse.data.oferta.familia_viables[0].Subfamila_productos)\r",
							"    pm.expect(jsonResponse.data.oferta.familia_viables[0].Subfamila_productos).to.eql([1,2]);\r",
							"});\r",
							"\r",
							"//16.\r",
							"pm.test(\"16. Validación: El Tipo de dato sea number en el campo id_oferta\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.oferta.id_oferta)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.oferta.id_oferta).to.be.a(\"number\")\r",
							"});\r",
							"//17.\r",
							"pm.test(\"17. Validación: Longitud correcta del campo id_oferta\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.oferta.id_oferta + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(5);        \r",
							"});\r",
							"\r",
							"//18.\r",
							"pm.test(\"18. Validación: Mensaje correcto en el campo message\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.message).to.eql(\"DATOS PROCESADOS CORRECTAMENTE, MOSTRAR OFERTA AL CLIENTE\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"tieneNegocio\": \"1\",\r\n    \"id_individuo\": {{ID_INDIVIDUO}},\r\n    \"id_persona\": {{ID_PERSONA}},\r\n    \"id_estado_civil\": 5.2,\r\n    \"monto_solicitado\": 12000,\r\n    \"id_proceso_venta\": {{ID_PROCESO_VENTA}},\r\n    \"mismo_domicilio\": true,\r\n    \"negocio\": {\r\n        \"id_tipo_negocio\": 19.1,\r\n        \"tiempo_negocio\": 78.2\r\n    },\r\n    \"direcciones\": [\r\n        {\r\n            \"id_tipo_domicilio\": 20.4,\r\n            \"calle\": \"Calle Niños Heroes\",\r\n            \"no_exterior\": \"247\",\r\n            \"no_interior\": \"SN\",\r\n            \"codigo_postal\": \"12.36667\",\r\n            \"id_colonia\": \"11.61616\",\r\n            \"id_municipio\": \"9.11017\",\r\n            \"id_entidad_federativa\": 8.11,\r\n            \"id_ciudad\": 1.2,\r\n            \"id_pais\": 22.1,\r\n            \"referencia_de_ubicacion\": \"Tacos\",\r\n            \"entre_calle_1\": \"NULL\",\r\n            \"entre_calle_2\": \"NULL\",\r\n            \"longitud\": -101.35151,\r\n            \"latitud\": 20.6824448\r\n        },\r\n        {\r\n            \"id_tipo_domicilio\": 20.1,\r\n            \"calle\": \"Calle Niños Heroes\",\r\n            \"no_exterior\": \"247\",\r\n            \"no_interior\": \"SN\",\r\n            \"codigo_postal\": \"12.36667\",\r\n            \"id_colonia\": \"11.61616\",\r\n            \"id_municipio\": \"9.11017\",\r\n            \"id_entidad_federativa\": 8.11,\r\n            \"id_ciudad\": 1.2,\r\n            \"id_pais\": 22.1,\r\n            \"referencia_de_ubicacion\": \"Tacos\",\r\n            \"entre_calle_1\": \"NULL\",\r\n            \"entre_calle_2\": \"NULL\",\r\n            \"longitud\": -101.35151,\r\n            \"latitud\": 20.6824448\r\n        }\r\n    ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/int/datos-segmentacion?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"int",
						"datos-segmentacion"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Complementar Informacion INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('PLD INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: Mensaje correcto en el campo message\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.message).to.eql(\"DATOS PROCESADOS CORRECTAMENTE\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_persona\": {{ID_PERSONA}},\r\n    \"id_familia_seleccionada\": 30.1,\r\n    \"segmentacion_bup\": {\r\n        \"tiene_negocio\": true,\r\n        \"id_tipo_negocio\": 19.1,\r\n        \"tiempo_en_negocio\": 78.2,\r\n        \"id_ocupacion\": \"53.2\",\r\n        \"id_actividad_economica\": \"28.2829028\",\r\n        \"id_nivel_escolar\": \"41.5\",\r\n        \"hijos\": 2,\r\n        \"id_competidor\": null\r\n    },\r\n    \"segmentacion_individuo\": [\r\n        {\r\n            \"id_dato_segmentador\": 3,\r\n            \"valor_segmentador\": \"false\"\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 4,\r\n            \"valor_segmentador\": \"\"\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 5,\r\n            \"valor_segmentador\": \"\"\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 7,\r\n            \"valor_segmentador\": null\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 16,\r\n            \"valor_segmentador\": null\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 10,\r\n            \"valor_segmentador\": \"\"\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 14,\r\n            \"valor_segmentador\": \"false\"\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 2,\r\n            \"valor_segmentador\": \"\"\r\n        },\r\n        {\r\n            \"id_dato_segmentador\": 1,\r\n            \"valor_segmentador\": \"10000\"\r\n        }\r\n    ],\r\n    \"isCapturado\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/complementar-informacion/segmentadores?key={{token}} ",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"complementar-informacion",
						"segmentadores"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}} "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PLD INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Buro INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2\r",
							"pm.test(\"2. Validación: El objeto data contenga 2 arreglos.\", function()\r",
							"{\r",
							"    var count = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"count: \" + count);\r",
							"   pm.expect(count).to.eql(2);    \r",
							"\r",
							"   pm.expect({direccion_registrada:[] }).to.have.all.keys('direccion_registrada');    \r",
							"\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: Los datos del campo direccion_registrada sean correctos\", function()\r",
							"{    \r",
							"    console.log(\"dat: \", jsonResponse.data.direccion_registrada[0])\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].calle).to.be.a(\"string\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].entreCalle1).to.be.a(\"string\" || \"null\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].entreCalle2).to.be.a(\"string\" || \"null\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].id).to.be.a(\"string\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idCiudadLocalidad).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idCodigoPostal).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idColonia).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idDelegacionMunicipio).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idEntidadFederativa).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idPais).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].idTipo).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].indActivo).to.eql(true);\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].latitud).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].longitud).to.be.a(\"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].noExterior).to.be.a(\"string\" || \"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].noInterior).to.be.a(\"string\" || \"number\");\r",
							"    pm.expect(jsonResponse.data.direccion_registrada[0].referenciaUbicacion).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El Tipo de dato sea number en el campo id_persona\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_persona)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_persona).to.be.a(\"number\")\r",
							"});\r",
							"//5.\r",
							"pm.test(\"5. Validación: Longitud correcta del campo id_persona\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_persona + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(9);        \r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El campo id_persona contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_persona).to.eql(pm.variables.get(\"ID_PERSONA\"))\r",
							"\r",
							"});\r",
							"\r",
							"//7.\r",
							"pm.test(\"7. Validación: Mensaje correcto en el campo message\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.message).to.eql(\"DATOS PROCESADOS CORRECTAMENTE\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_persona\": {{ID_PERSONA}},\r\n    \"id_proceso_venta\": {{ID_PROCESO_VENTA}},\r\n    \"pld_individuo\": {\r\n        \"tiene_persona_pld\": false,\r\n        \"nombre_persona_pld\": \"\",\r\n        \"puesto_clasificacion_pld\": null,\r\n        \"relacion_empleado\": null,\r\n        \"parentesco_persona_pld_titular\": null\r\n    },\r\n    \"pep_bup\": {\r\n        \"tiene_persona_pep\": false,\r\n        \"nombre_persona_pep\": \"\",\r\n        \"parentesco_persona_pep_titular\": null\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/complementar-informacion/pld-pep?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"complementar-informacion",
						"pld-pep"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Buro INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Domicilio Visita Ind INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El campo data sea null\", function(){\r",
							"    pm.expect(jsonResponse.data).to.eql(null);\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El campo message sea success\", function(){\r",
							"    pm.expect(jsonResponse.message).to.eql(\"success\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_individuo\": {{ID_INDIVIDUO}},\r\n    \"id_persona\": {{ID_PERSONA}},\r\n    \"titular_credito\": true,\r\n    \"digitos_tarjeta\": \"1246\",\r\n    \"credito_hipotecario_vigente\": false,\r\n    \"credito_automotriz\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/complementar-informacion/buro?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"complementar-informacion",
						"buro"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Domicilio Visita Ind INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Pre Registro Invitados INT');\r",
							"\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El Objeto data contenga 3 campos.\", function()\r",
							"{\r",
							"    var count = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"count: \" + count);\r",
							"   pm.expect(count).to.eql(3);   \r",
							"   pm.expect({id_persona: Number, id_proceso_venta: Number, oferta: {}}).to.have.all.keys('id_persona', 'id_proceso_venta', 'oferta');        \r",
							"\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El Tipo de dato sea number en el campo id_persona\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_persona)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_persona).to.be.a(\"number\")\r",
							"});\r",
							"//4.\r",
							"pm.test(\"4. Validación: Longitud correcta del campo id_persona\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_persona + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(9);        \r",
							"});\r",
							"\r",
							"//5.\r",
							"pm.test(\"5. Validación: El campo id_persona contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_persona).to.eql(pm.variables.get(\"ID_PERSONA\"))\r",
							"\r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El Tipo de dato sea number en el campo id_proceso_venta\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.id_proceso_venta)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.id_proceso_venta).to.be.a(\"number\")\r",
							"});\r",
							"//7.\r",
							"pm.test(\"7. Validación: Longitud correcta del campo id_proceso_venta\", function()\r",
							"{\r",
							"    var proceso = Math.ceil(Math.log10(jsonResponse.data.id_proceso_venta + 1));    \r",
							"    console.log (proceso)\r",
							"    pm.expect(proceso).to.eql(7);        \r",
							"});\r",
							"\r",
							"//8.\r",
							"pm.test(\"8. Validación: El campo id_proceso_venta contenga la información correcta\", function()\r",
							"{\r",
							"    pm.expect(jsonResponse.data.id_proceso_venta).to.eql(pm.variables.get(\"ID_PROCESO_VENTA\"))\r",
							"});\r",
							"\r",
							"//9.\r",
							"pm.test(\"9. Validación: El objeto oferta contenga 3 campos.\", function()\r",
							"{\r",
							"    var contar = Object.keys(jsonResponse.data.oferta).length;\r",
							"    console.log(\"contar: \" + contar);\r",
							"   pm.expect(contar).to.eql(3);   \r",
							"   pm.expect({id_oferta: Number, producto_ofrecido: [], requisitos: {}}).to.have.all.keys('id_oferta', 'producto_ofrecido', 'requisitos');        \r",
							"\r",
							"});\r",
							"\r",
							"//10.\r",
							"pm.test(\"10. Validación: El tipo de dato sea number en el campo id_oferta\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"detalle\", jsonResponse.data.oferta.id_oferta)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.oferta.id_oferta).to.be.a(\"number\")\r",
							"});\r",
							"\r",
							"//11. \r",
							"pm.test(\"11. Validación: El objeto producto_ofrecido contenga 3 campos.\", function()\r",
							"{\r",
							"    var producto = Object.keys(jsonResponse.data.oferta.producto_ofrecido[0]).length;\r",
							"    console.log(\"producto: \" + producto);\r",
							"    pm.expect(producto).to.eql(3);   \r",
							"    pm.expect({Id_familia_producto: Number, Subfamila_productos: [], monto_minimo_garantizado: Number})\r",
							"    .to.have.all.keys('Id_familia_producto', 'Subfamila_productos', 'monto_minimo_garantizado');        \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"//12.\r",
							"pm.test(\"12. Validación: El tipo de dato sea number en el campo Id_familia_producto\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"Id_familia_producto\", jsonResponse.data.oferta.producto_ofrecido[0].Id_familia_producto)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.oferta.producto_ofrecido[0].Id_familia_producto).to.be.a(\"number\")\r",
							"});\r",
							"\r",
							"//13.\r",
							"pm.test(\"13. Validación: El tipo de dato sea number en  el campo Subfamila_productos\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"Subfamila_productos\", jsonResponse.data.oferta.producto_ofrecido[0].Subfamila_productos)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.oferta.producto_ofrecido[0].Subfamila_productos[0]).to.be.a(\"number\")\r",
							"});\r",
							"\r",
							"//14.\r",
							"pm.test(\"13. Validación: El tipo de dato sea number en  el campo Subfamila_productos\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"Subfamila_productos\", jsonResponse.data.oferta.producto_ofrecido[0].Subfamila_productos)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.oferta.producto_ofrecido[0].Subfamila_productos[0]).to.be.a(\"number\")\r",
							"});\r",
							"\r",
							"//15. \r",
							"pm.test(\"15. Validación: El objeto requisitos contenga 2 campos.\", function()\r",
							"{\r",
							"    var req = Object.keys(jsonResponse.data.oferta.requisitos).length;\r",
							"    console.log(\"req: \" + req);\r",
							"    pm.expect(req).to.eql(2);   \r",
							"    pm.expect({Requiere_aval: Number, TipoTer: null })\r",
							"    .to.have.all.keys('Requiere_aval', 'TipoTer');        \r",
							"\r",
							"});\r",
							"\r",
							"//16.\r",
							"pm.test(\"16. Validación: El tipo de dato sea number en  el campo Requiere_aval\", function()\r",
							"{\r",
							"   \r",
							"    console.log(\"Requiere_aval\", jsonResponse.data.oferta.requisitos.Requiere_aval)\r",
							"    \r",
							"    pm.expect(jsonResponse.data.oferta.requisitos.Requiere_aval).to.be.eql(\"0\")\r",
							"});\r",
							"\r",
							"//17.\r",
							"pm.test(\"17. Validación: El tipo de dato sea null en  el campo TipoTer\", function()\r",
							"{    \r",
							"    console.log(\"TipoTer\", jsonResponse.data.oferta.requisitos.TipoTer)    \r",
							"    pm.expect(jsonResponse.data.oferta.requisitos.TipoTer).to.be.a(\"null\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_persona\": {{ID_PERSONA}},\r\n    \"id_proceso_venta\": {{ID_PROCESO_VENTA}},\r\n    \"id_tipo_domicilio_visita\": 20.4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/int/complementar-informacion/domicilio-visita-ind?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"int",
						"complementar-informacion",
						"domicilio-visita-ind"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Pre Registro Invitados INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Retrieve - Information INT');\r",
							"\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El Objeto data contenga 6 campos.\", function()\r",
							"{\r",
							"    var registro = Object.keys(jsonResponse.data[0]).length;\r",
							"    console.log(\"registro: \" + registro);\r",
							"    pm.expect(registro).to.eql(6);   \r",
							"    pm.expect({fecha_registro: String, id_funcion_participante: Number, id_funcion_participante_descripcion: String, id_participante:Number, nombre: String, telefono: String})\r",
							"    .to.have.all.keys('fecha_registro', 'id_funcion_participante', 'id_funcion_participante_descripcion', 'id_participante', 'nombre', 'telefono');\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El Tipo de dato sea number en el campo id_proceso_venta\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"fecha\", jsonResponse.data[0].fecha_registro)    \r",
							"    pm.expect(jsonResponse.data[0].fecha_registro).to.be.a(\"String\")\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El Tipo de dato sea number en el campo id_funcion_participante\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"participante\", jsonResponse.data[0].id_funcion_participante)    \r",
							"    pm.expect(jsonResponse.data[0].id_funcion_participante).to.be.a(\"number\")\r",
							"});\r",
							"\r",
							"//5.\r",
							"pm.test(\"5. Validación: El Tipo de dato sea number en el campo id_funcion_participante_descripcion\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"participante\", jsonResponse.data[0].id_funcion_participante_descripcion)    \r",
							"    pm.expect(jsonResponse.data[0].id_funcion_participante_descripcion).to.be.a(\"String\")\r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El Tipo de dato sea number en el campo id_participante\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"participante\", jsonResponse.data[0].id_participante)    \r",
							"    pm.expect(jsonResponse.data[0].id_participante).to.be.a(\"number\")\r",
							"});\r",
							"\r",
							"//7.\r",
							"pm.test(\"7. Validación: El Tipo de dato sea number en el campo nombre\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"participante\", jsonResponse.data[0].nombre)    \r",
							"    pm.expect(jsonResponse.data[0].nombre).to.be.a(\"String\")\r",
							"});\r",
							"\r",
							"//8.\r",
							"pm.test(\"8. Validación: El Tipo de dato sea number en el campo telefono\", function()\r",
							"{\r",
							"    console.log(\"Response: \", jsonResponse);\r",
							"    console.log(\"participante\", jsonResponse.data[0].telefono)    \r",
							"    pm.expect(jsonResponse.data[0].telefono).to.be.a(\"String\" || \"null\")\r",
							"\r",
							"});\r",
							"\r",
							"//9.\r",
							"pm.test(\"9. Validación: El Tipo de dato sea number en el campo id_proceso_venta_invitado\", function()\r",
							"{    \r",
							"    console.log(\"proceso_venta\", jsonResponse.id_proceso_venta_invitado)    \r",
							"    pm.expect(jsonResponse.id_proceso_venta_invitado).to.be.a(\"number\")\r",
							"\r",
							"});\r",
							"\r",
							"//10.\r",
							"pm.test(\"10. Validación: El Tipo de dato sea String en el campo message\", function()\r",
							"{    \r",
							"    console.log(\"message\", jsonResponse.message)    \r",
							"    pm.expect(jsonResponse.message).to.be.a(\"String\")\r",
							"\r",
							"});\r",
							"\r",
							"//11.\r",
							"pm.test(\"11. Validación: El mensaje sea correcto en el campo message\", function()\r",
							"{    \r",
							"    console.log(\"message\", jsonResponse.message)    \r",
							"    pm.expect(jsonResponse.message).to.eql(\"success\")\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_proceso_venta\": {{ID_PROCESO_VENTA}},\r\n    \"id_participante_ref\": \"undefined\",\r\n    \"primer_nombre\": \"Jaime\",\r\n    \"segundo_nombre\": \"Fernando\",\r\n    \"primer_apellido\": \"Arista\",\r\n    \"segundo_apellido\": \"Arroyo\",\r\n    \"id_tipo_telefono\": 10.2,\r\n    \"telefono\": \"{{TELEFONO}}\",\r\n    \"acepta_aviso_privacidad\": true,\r\n    \"verifica_telefono\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/invitados/pre-registro?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"invitados",
						"pre-registro"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve - Information INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"//setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Oferta-Get-Detalle-Proceso-Venta INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El objeto data contenga 2 obejetos.\", function()\r",
							"{\r",
							"    var retrive = Object.keys(jsonResponse.data[0]).length;\r",
							"    console.log(\"retrive: \" + retrive);\r",
							"    pm.expect(retrive).to.eql(2);   \r",
							"    pm.expect({individuo: {}, persona: {}})\r",
							"    .to.have.all.keys('individuo', 'persona');\r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El objeto individuo contenga 25 campos.\", function()\r",
							"{\r",
							"    var ind = Object.keys(jsonResponse.data[0].individuo).length;\r",
							"    console.log(\"ind: \" + ind);\r",
							"    pm.expect(ind).to.eql(25);   \r",
							"    pm.expect({id_individuo: Number, primer_nombre: String, segundo_nombre: String, primer_apellido: String, segundo_apellido:String, id_genero:Number, fecha_nacimiento:String,         id_entidad_federativa_nacimiento:Number, id_estado_civil:Number, id_pais:Number, id_tipo_notificacion:Number, acepta_aviso_priv:Boolean, version_aviso_priv:String, id_empresa:null, id_sistema:null, ind_conyuge_mismo_domicilio:Boolean})\r",
							"    .to.have.all.keys('id_individuo', 'primer_nombre', 'segundo_nombre', 'primer_apellido', 'segundo_apellido', 'id_genero', 'fecha_nacimiento', 'id_entidad_federativa_nacimiento',\r",
							"     'id_estado_civil', 'id_pais', 'id_tipo_notificacion', 'acepta_aviso_priv', 'version_aviso_priv', 'id_empresa', 'id_sistema', 'ind_conyuge_mismo_domicilio');\r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El objeto ind_individuo_telefono contenga los datos correctos \", function()\r",
							"{\r",
							"    var ind_telefono = Object.keys(jsonResponse.data[0].individuo.ind_individuo_telefono[0]).length;\r",
							"    console.log(\"ind_telefono: \" + ind_telefono);\r",
							"    pm.expect(ind_telefono).to.eql(8);   \r",
							"    pm.expect({id_individuo:Number, id_tipo_telefono:Number, telefono:String, ind_telefono_validado:Number, fecha_creacion:String, usuario_cracion:String, fecha_modificacion:String, usuario_modificacion:String}).to.have.all.keys('id_individuo', 'id_tipo_telefono', 'telefono', 'ind_telefono_validado', 'fecha_creacion', 'usuario_cracion', 'fecha_modificacion', 'usuario_modificacion');\r",
							"});\r",
							"\r",
							"//5.\r",
							"pm.test(\"5. Validación: El objeto ind_individuo_direccion contenga los datos correctos \", function()\r",
							"{\r",
							"    var direccion = Object.keys(jsonResponse.data[0].individuo.ind_individuo_direccion[0]).length;\r",
							"    console.log(\"direccion: \" + direccion);\r",
							"    pm.expect(direccion).to.eql(20);   \r",
							"    pm.expect({id_tipo_domicilio:Number, calle:String, no_exterior:String, no_interior:String, id_codigo_postal:String, id_colonia:String, id_municipio:String, id_ciudad:String,id_entidad_federativa:String,id_pais:String,referencia_de_ubicacion:String,entre_calle_1:String,entre_calle_2:String,latitud:String, longitud:String, ind_dir_visita:Boolean, fecha_creacion:String, usuario_creacion:String, fecha_modificacion:String, usuario_modificacion:String})  \r",
							"    .to.have.all.keys('id_tipo_domicilio','calle', 'no_exterior','no_interior','id_codigo_postal','id_colonia','id_municipio','id_ciudad','id_entidad_federativa','id_pais','referencia_de_ubicacion','entre_calle_1','entre_calle_2','latitud','longitud','ind_dir_visita','fecha_creacion', 'usuario_creacion', 'fecha_modificacion', 'usuario_modificacion');\r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El objeto ind_individuo_identificador contenga los datos correctos \", function()\r",
							"{\r",
							"    var identificador = Object.keys(jsonResponse.data[0].individuo.ind_individuo_identificador[0]).length;\r",
							"    console.log(\"identificador: \" + identificador);\r",
							"    pm.expect(identificador).to.eql(12);   \r",
							"    pm.expect({id_tipo_identificador:Number, numero_identificador:String, id_institucion:null, ind_validado:Boolean, inicio_validez:String, fin_validez:String, id_pais_validez:null, id_estado_validez:null, fecha_creacion:String, usuario_creacion:String, fecha_modificacion:null, usuario_modificacion:null })\r",
							"    .to.have.all.keys('id_tipo_identificador', 'numero_identificador', 'id_institucion', 'ind_validado', 'inicio_validez', 'fin_validez', 'id_pais_validez', 'id_estado_validez', 'fecha_creacion', 'usuario_creacion', 'fecha_modificacion', 'usuario_modificacion');\r",
							"});\r",
							"\r",
							"\r",
							"//7.\r",
							"pm.test(\"7. Validación: El objeto ind_individuo_pld contenga los datos correctos \", function()\r",
							"{\r",
							"    var ind_pld = Object.keys(jsonResponse.data[0].individuo.ind_individuo_pld).length;\r",
							"    console.log(\"ind_pld: \" + ind_pld);\r",
							"    pm.expect(ind_pld).to.eql(2);   \r",
							"    pm.expect({id_individuo:Number, pld:{}})\r",
							"    .to.have.all.keys('id_individuo', 'pld');\r",
							"});\r",
							"\r",
							"\r",
							"//8.\r",
							"pm.test(\"8. Validación: El campo pld contenga los datos correctos \", function()\r",
							"{\r",
							"    var pld = Object.keys(jsonResponse.data[0].individuo.ind_individuo_pld.pld).length;\r",
							"    console.log(\"pld: \" + pld);\r",
							"    pm.expect(pld).to.eql(19);   \r",
							"    pm.expect({ind_familiar_compartamos:Number, nombre_familiar_compartamos:String, id_puesto_clasificacion_pld:null, id_relacion_familiar_compartamos:null, id_relacion_familiar_pep:null, tiene_pep:Boolean, ind_otro_cargo:null, cuales_otro_cargo:null, donde_otro_cargo:null, periodo_otro_cargo:null, cargo_familiares:null, periodo_cargo_familiar:null, informacion_adicional:null, id_ingreso_mensual_cargo:null, id_cargo_ocupo_postulo:null, fecha_creacion:String, usuario_creacion:String, fecha_modificacion:String, usuario_modificacion:null})\r",
							"    .to.have.all.keys('ind_familiar_compartamos', 'nombre_familiar_compartamos','id_puesto_clasificacion_pld','id_relacion_familiar_compartamos','id_relacion_familiar_pep','tiene_pep','ind_otro_cargo','cuales_otro_cargo','donde_otro_cargo','periodo_otro_cargo','cargo_familiares','periodo_cargo_familiar','informacion_adicional','id_ingreso_mensual_cargo','id_cargo_ocupo_postulo','fecha_creacion','usuario_creacion','fecha_modificacion', 'usuario_modificacion');\r",
							"});\r",
							"\r",
							"//9.\r",
							"pm.test(\"9. Validación: El objeto ind_individuo_segmentadores contenga los campos correctos \", function()\r",
							"{\r",
							"    var segmentadores = Object.keys(jsonResponse.data[0].individuo.ind_individuo_segmentadores).length;\r",
							"    console.log(\"segmentadores: \" + segmentadores);\r",
							"    pm.expect(segmentadores).to.eql(9);   \r",
							"    \r",
							"});\r",
							"\r",
							"//10.\r",
							"pm.test(\"10. Validación: La informacion del segmento 1 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_1: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].dato_segmentador.id_dato_segmentador).to.eql(1);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].dato_segmentador.tipo_segmentador).to.eql(\"MONTO INGRESO FAMILIAR\");\r",
							"});\r",
							"\r",
							"//11.\r",
							"pm.test(\"11. Validación: La informacion del segmento 2 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_2: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[1].dato_segmentador.id_dato_segmentador).to.eql(2);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[1].dato_segmentador.tipo_segmentador).to.eql(\"CUENTA CON SEGURO SOCIAL, PRESTACIONES\");\r",
							"});\r",
							"\r",
							"//12.\r",
							"pm.test(\"12. Validación: La informacion del segmento 3 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_2: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[2].dato_segmentador.id_dato_segmentador).to.eql(3);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[2].dato_segmentador.tipo_segmentador).to.eql(\"¿HAS TENIDO EXPERIENCIA CON CRÉDITO GRUPAL?\");\r",
							"});\r",
							"\r",
							"//13.\r",
							"pm.test(\"13. Validación: La informacion del segmento 4 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[3].dato_segmentador.id_dato_segmentador).to.eql(4);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[3].dato_segmentador.tipo_segmentador).to.eql(\"¿CUÁNTAS INTEGRANTES TIENE O TENÍA TU GRUPO?\");\r",
							"});\r",
							"\r",
							"//14.\r",
							"pm.test(\"14. Validación: La informacion del segmento 5 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[4].dato_segmentador.id_dato_segmentador).to.eql(5);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[4].dato_segmentador.tipo_segmentador).to.eql(\"¿CUÁNTO LE PRESTARON AL GRUPO?\");\r",
							"});\r",
							"\r",
							"//15.\r",
							"pm.test(\"15. Validación: La informacion del segmento 7 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[5].dato_segmentador.id_dato_segmentador).to.eql(7);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[5].dato_segmentador.tipo_segmentador).to.eql(\"¿CUÁNTO TIEMPO LLEVAS CON TU GRUPO?\");\r",
							"});\r",
							"\r",
							"\r",
							"//16.\r",
							"pm.test(\"16. Validación: La informacion del segmento 10 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[6].dato_segmentador.id_dato_segmentador).to.eql(10);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[6].dato_segmentador.tipo_segmentador).to.eql(\"RAZÓN SOCIAL EMPLEADOR\");\r",
							"});\r",
							"\r",
							"//17.\r",
							"pm.test(\"17. Validación: La informacion del segmento 14 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[7].dato_segmentador.id_dato_segmentador).to.eql(14);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[7].dato_segmentador.tipo_segmentador).to.eql(\"¿Cuentas con recibos de nomina?\");\r",
							"});\r",
							"\r",
							"//18.\r",
							"pm.test(\"18. Validación: La informacion del segmento 16 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[8].dato_segmentador.id_dato_segmentador).to.eql(16);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[8].dato_segmentador.tipo_segmentador).to.eql(\"¿Quien les dio el credito?\");\r",
							"});\r",
							"\r",
							"//19.\r",
							"pm.test(\"19. Validación: El objeto ind_individuo_red_social contenga los campos correctos \", function()\r",
							"{\r",
							"    var social = Object.keys(jsonResponse.data[0].individuo.ind_individuo_red_social[0]).length;\r",
							"    console.log(\"social: \" + social);\r",
							"   pm.expect(social).to.eql(7);   \r",
							"});\r",
							"\r",
							"//20.\r",
							"pm.test(\"20. Validación: El objeto ind_individuo_referencias contenga los campos correctos \", function()\r",
							"{\r",
							"    var referencias = Object.keys(jsonResponse.data[0].individuo.ind_individuo_referencias).length;\r",
							"    console.log(\"referencias: \" + referencias);\r",
							"   //pm.expect(social).to.eql(7);   \r",
							"});\r",
							"    \r",
							"//21.\r",
							"pm.test(\"21. Validación: El objeto persona contenga los obejetos correctos \", function()\r",
							"{\r",
							"    var persona = Object.keys(jsonResponse.data[0].persona).length;\r",
							"    console.log(\"persona: \" + persona);\r",
							"   pm.expect(persona).to.eql(6);   \r",
							"});\r",
							"\r",
							"//22.\r",
							"pm.test(\"22. Validación: El objeto ind_lego_minimo contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_minimo = Object.keys(jsonResponse.data[0].persona.ind_lego_minimo).length;\r",
							"    console.log(\"lego_minimo: \" + lego_minimo);\r",
							"    pm.expect(lego_minimo).to.eql(2); \r",
							"\r",
							"    //*********************** minimos *********************** \r",
							"\r",
							"    var minimos = Object.keys(jsonResponse.data[0].persona.ind_lego_minimo.minimos).length;\r",
							"    console.log(\"minimos: \" + minimos);\r",
							"    pm.expect(minimos).to.eql(6);    \r",
							"\r",
							"     //*********************** datosPersona *********************** \r",
							"    var dataPersona = Object.keys(jsonResponse.data[0].persona.ind_lego_minimo.datosPersona).length;\r",
							"    console.log(\"dataPersona : \" + dataPersona);\r",
							"    pm.expect(dataPersona).to.eql(6);        \r",
							"    //*******************************************************\r",
							"\r",
							"});\r",
							"\r",
							"//23.\r",
							"pm.test(\"23. Validación: El objeto ind_lego_basico contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_basico = Object.keys(jsonResponse.data[0].persona.ind_lego_basico).length;\r",
							"    console.log(\"lego_basico: \" + lego_basico);\r",
							"    pm.expect(lego_basico).to.eql(37); \r",
							"\r",
							"});\r",
							"\r",
							"//24.\r",
							"pm.test(\"24. Validación: El objeto ind_lego_contacto contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_contacto = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto).length;\r",
							"    console.log(\"lego_contacto: \" + lego_contacto);\r",
							"    pm.expect(lego_contacto).to.eql(3); \r",
							"\r",
							"    //**************************    domicilio   ****************\r",
							"    var domicilio = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.domicilio).length;\r",
							"    console.log(\"domicilio: \" + domicilio);\r",
							"    pm.expect(domicilio).to.eql(2); \r",
							"\r",
							"    //**************************    domicilio [0]   ****************\r",
							"    var dom_objeto_cero = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.domicilio[0]).length;\r",
							"    console.log(\"dom_objeto_cero: \" + dom_objeto_cero);\r",
							"    pm.expect(dom_objeto_cero).to.eql(17); \r",
							"\r",
							"    //**************************    domicilio [1]   ****************\r",
							"    var dom_objeto_uno = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.domicilio[1]).length;\r",
							"    console.log(\"dom_objeto_uno: \" + dom_objeto_uno);\r",
							"    pm.expect(dom_objeto_uno).to.eql(17); \r",
							"\r",
							"     //**************************    email   ****************\r",
							"    var email = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.email).length;\r",
							"    console.log(\"email: \" + email);\r",
							"    pm.expect(email).to.eql(0); \r",
							"\r",
							"      //**************************    telefono   ****************\r",
							"    var telefono = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.telefono).length;\r",
							"    console.log(\"telefono: \" + telefono);\r",
							"    pm.expect(telefono).to.eql(2); \r",
							"\r",
							"      //**************************    telefono [0]   ****************\r",
							"    var tel_object_cero = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.telefono[0]).length;\r",
							"    console.log(\"tel_object_cero: \" + tel_object_cero);\r",
							"    pm.expect(tel_object_cero).to.eql(5);\r",
							"    \r",
							"\r",
							"      //**************************    telefono [1]   ****************\r",
							"    var tel_object_uno = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.telefono[1]).length;\r",
							"    console.log(\"tel_object_uno: \" + tel_object_uno);\r",
							"    pm.expect(tel_object_uno).to.eql(5); \r",
							"\r",
							"});\r",
							"\r",
							"//25\r",
							"pm.test(\"25. Validación: El objeto ind_lego_segmentadores contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_segmentadores = Object.keys(jsonResponse.data[0].persona.ind_lego_segmentadores).length;\r",
							"    console.log(\"lego_segmentadores: \" + lego_segmentadores);\r",
							"    pm.expect(lego_segmentadores).to.eql(23); \r",
							"\r",
							"});\r",
							"\r",
							"//26.\r",
							"pm.test(\"26. Validación: El objeto ind_lego_riesgo contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_riesgo = Object.keys(jsonResponse.data[0].persona.ind_lego_riesgo).length;\r",
							"    console.log(\"lego_riesgo: \" + lego_riesgo);\r",
							"    pm.expect(lego_riesgo).to.eql(9); \r",
							"\r",
							"});\r",
							"\r",
							"//27.\r",
							"pm.test(\"27. Validación: El objeto ind_lego_banco contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_banco = Object.keys(jsonResponse.data[0].persona.ind_lego_banco).length;\r",
							"    console.log(\"lego_banco: \" + lego_banco);\r",
							"    pm.expect(lego_banco).to.eql(6); \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"    \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"search\": [\r\n        {\r\n            \"id_objeto\": 33746,\r\n            \"id_tipo_objeto\": 1,\r\n            \"indicadores\": {\r\n                \"ind_individuo\": true,\r\n                \"ind_individuo_rol\": true,\r\n                \"ind_individuo_telefono\": true,\r\n                \"ind_individuo_direccion\": true,\r\n                \"ind_individuo_identificador\": true,\r\n                \"ind_individuo_aviso_privacidad\": true,\r\n                \"ind_individuo_pld\": true,\r\n                \"ind_individuo_segmentadores\": true,\r\n                \"ind_individuo_red_social\": true,\r\n                \"ind_individuo_referencias\": true,\r\n                \"ind_lego_minimo\": true,\r\n                \"ind_lego_basico\": true,\r\n                \"ind_lego_contacto\": true,\r\n                \"ind_lego_segmentadores\": true,\r\n                \"ind_lego_riesgo\": true,\r\n                \"ind_lego_banco\": true,\r\n                \"ind_lego_cuenta_otro_banco\": false\r\n            }\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/individuos/retrieve-information?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"individuos",
						"retrieve-information"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Oferta-Get-Detalle-Proceso-Venta INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"//setTimeout(() => {}, 10000)\r",
							"postman.setNextRequest('Crea Evento INT');\r",
							"\r",
							"\r",
							"\r",
							"// *********** T e s t s ************\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El objeto data contenga 2 obejetos.\", function()\r",
							"{\r",
							"    var data_oferta_get = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"data_oferta_get: \" + data_oferta_get);\r",
							"    pm.expect(data_oferta_get).to.eql(1);       \r",
							"});\r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El objeto individuo contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var oferta_individuo = Object.keys(jsonResponse.data[0].individuo).length;\r",
							"    console.log(\"oferta_individuo: \" + oferta_individuo);\r",
							"    pm.expect(oferta_individuo).to.eql(25);       \r",
							"});\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El objeto ind_individuo_rol contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_rol = Object.keys(jsonResponse.data[0].individuo.ind_individuo_rol).length;\r",
							"    console.log(\"ind_rol: \" + ind_rol);\r",
							"    pm.expect(ind_rol).to.eql(0);       \r",
							"});\r",
							"\r",
							"//5.\r",
							"pm.test(\"5. Validación: El objeto ind_individuo_telefono contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_tel = Object.keys(jsonResponse.data[0].individuo.ind_individuo_telefono[0]).length;\r",
							"    console.log(\"ind_tel: \" + ind_tel);\r",
							"    pm.expect(ind_tel).to.eql(8);       \r",
							"});\r",
							"\r",
							"//6.\r",
							"pm.test(\"6. Validación: El objeto ind_individuo_direccion contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_direc = Object.keys(jsonResponse.data[0].individuo.ind_individuo_direccion[0]).length;\r",
							"    console.log(\"ind_direc: \" + ind_direc);\r",
							"    pm.expect(ind_direc).to.eql(20);       \r",
							"});\r",
							"\r",
							"//7.\r",
							"pm.test(\"7. Validación: El objeto ind_individuo_identificador contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_id = Object.keys(jsonResponse.data[0].individuo.ind_individuo_identificador[0]).length;\r",
							"    console.log(\"ind_id: \" + ind_id);\r",
							"    pm.expect(ind_id).to.eql(12);       \r",
							"});\r",
							"\r",
							"//8.\r",
							"pm.test(\"8. Validación: El objeto ind_individuo_aviso_privacidad contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_privacy = Object.keys(jsonResponse.data[0].individuo.ind_individuo_aviso_privacidad).length;\r",
							"    console.log(\"ind_privacy: \" + ind_privacy);\r",
							"    pm.expect(ind_privacy).to.eql(0);       \r",
							"});\r",
							"\r",
							"//9.\r",
							"pm.test(\"9. Validación: El objeto ind_individuo_pld contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_pld = Object.keys(jsonResponse.data[0].individuo.ind_individuo_pld).length;\r",
							"    console.log(\"ind_pld: \" + ind_pld);\r",
							"    pm.expect(ind_pld).to.eql(2);       \r",
							"});\r",
							"\r",
							"//10.\r",
							"pm.test(\"10. Validación: El objeto ind_individuo_pld contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var ind_pld = Object.keys(jsonResponse.data[0].individuo.ind_individuo_pld).length;\r",
							"    console.log(\"ind_pld: \" + ind_pld);\r",
							"    pm.expect(ind_pld).to.eql(2);       \r",
							"});\r",
							"\r",
							"//11.\r",
							"pm.test(\"11. Validación: El objeto pld contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var pld = Object.keys(jsonResponse.data[0].individuo.ind_individuo_pld.pld).length;\r",
							"    console.log(\"pld: \" + pld);\r",
							"    pm.expect(pld).to.eql(19);       \r",
							"});\r",
							"\r",
							"//12.\r",
							"pm.test(\"12. Validación: El objeto ind_individuo_segmentadores contenga los obejetos y datos correctos.\", function()\r",
							"{\r",
							"    var segmenters = Object.keys(jsonResponse.data[0].individuo.ind_individuo_segmentadores).length;\r",
							"    console.log(\"segmenters: \" + segmenters);\r",
							"    pm.expect(segmenters).to.eql(9);       \r",
							"});\r",
							"\r",
							"//13.\r",
							"pm.test(\"13. Validación: La informacion del segmento 1 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_1: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].dato_segmentador.id_dato_segmentador).to.eql(1);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].dato_segmentador.tipo_segmentador).to.eql(\"MONTO INGRESO FAMILIAR\");\r",
							"});\r",
							"\r",
							"//14.\r",
							"pm.test(\"14. Validación: La informacion del segmento 2 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_2: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[1].dato_segmentador.id_dato_segmentador).to.eql(2);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[1].dato_segmentador.tipo_segmentador).to.eql(\"CUENTA CON SEGURO SOCIAL, PRESTACIONES\");\r",
							"});\r",
							"\r",
							"//15.\r",
							"pm.test(\"15. Validación: La informacion del segmento 3 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_2: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[2].dato_segmentador.id_dato_segmentador).to.eql(3);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[2].dato_segmentador.tipo_segmentador).to.eql(\"¿HAS TENIDO EXPERIENCIA CON CRÉDITO GRUPAL?\");\r",
							"});\r",
							"\r",
							"//16.\r",
							"pm.test(\"16. Validación: La informacion del segmento 4 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[3].dato_segmentador.id_dato_segmentador).to.eql(4);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[3].dato_segmentador.tipo_segmentador).to.eql(\"¿CUÁNTAS INTEGRANTES TIENE O TENÍA TU GRUPO?\");\r",
							"});\r",
							"\r",
							"//17.\r",
							"pm.test(\"17. Validación: La informacion del segmento 5 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[4].dato_segmentador.id_dato_segmentador).to.eql(5);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[4].dato_segmentador.tipo_segmentador).to.eql(\"¿CUÁNTO LE PRESTARON AL GRUPO?\");\r",
							"});\r",
							"\r",
							"//18.\r",
							"pm.test(\"18. Validación: La informacion del segmento 7 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[5].dato_segmentador.id_dato_segmentador).to.eql(7);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[5].dato_segmentador.tipo_segmentador).to.eql(\"¿CUÁNTO TIEMPO LLEVAS CON TU GRUPO?\");\r",
							"});\r",
							"\r",
							"\r",
							"//19.\r",
							"pm.test(\"19. Validación: La informacion del segmento 10 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[6].dato_segmentador.id_dato_segmentador).to.eql(10);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[6].dato_segmentador.tipo_segmentador).to.eql(\"RAZÓN SOCIAL EMPLEADOR\");\r",
							"});\r",
							"\r",
							"//20.\r",
							"pm.test(\"20. Validación: La informacion del segmento 14 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[7].dato_segmentador.id_dato_segmentador).to.eql(14);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[7].dato_segmentador.tipo_segmentador).to.eql(\"¿Cuentas con recibos de nomina?\");\r",
							"});\r",
							"\r",
							"//21.\r",
							"pm.test(\"21. Validación: La informacion del segmento 16 sea correcta\", function (){\r",
							"\r",
							"    console.log(\"segmento_3: \" + jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo)\r",
							"   // pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"))\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[8].dato_segmentador.id_dato_segmentador).to.eql(16);\r",
							"    pm.expect(jsonResponse.data[0].individuo.ind_individuo_segmentadores[8].dato_segmentador.tipo_segmentador).to.eql(\"¿Quien les dio el credito?\");\r",
							"});\r",
							"\r",
							"//22.\r",
							"pm.test(\"22. Validación: El objeto ind_individuo_red_social contenga los campos correctos \", function()\r",
							"{\r",
							"    var social = Object.keys(jsonResponse.data[0].individuo.ind_individuo_red_social[0]).length;\r",
							"    console.log(\"social: \" + social);\r",
							"   pm.expect(social).to.eql(7);   \r",
							"});\r",
							"\r",
							"//23.\r",
							"pm.test(\"23. Validación: El objeto ind_individuo_referencias contenga los campos correctos \", function()\r",
							"{\r",
							"    var referencias = Object.keys(jsonResponse.data[0].individuo.ind_individuo_referencias).length;\r",
							"    console.log(\"referencias: \" + referencias);\r",
							"   //pm.expect(social).to.eql(7);   \r",
							"});\r",
							"    \r",
							"//24.\r",
							"pm.test(\"24. Validación: El objeto persona contenga los obejetos correctos \", function()\r",
							"{\r",
							"    var persona = Object.keys(jsonResponse.data[0].persona).length;\r",
							"    console.log(\"persona: \" + persona);\r",
							"   pm.expect(persona).to.eql(6);   \r",
							"});\r",
							"\r",
							"//25.\r",
							"pm.test(\"25. Validación: El objeto ind_lego_minimo contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_minimo = Object.keys(jsonResponse.data[0].persona.ind_lego_minimo).length;\r",
							"    console.log(\"lego_minimo: \" + lego_minimo);\r",
							"    pm.expect(lego_minimo).to.eql(2); \r",
							"\r",
							"    //*********************** minimos *********************** \r",
							"\r",
							"    var minimos = Object.keys(jsonResponse.data[0].persona.ind_lego_minimo.minimos).length;\r",
							"    console.log(\"minimos: \" + minimos);\r",
							"    pm.expect(minimos).to.eql(6);    \r",
							"\r",
							"     //*********************** datosPersona *********************** \r",
							"    var dataPersona = Object.keys(jsonResponse.data[0].persona.ind_lego_minimo.datosPersona).length;\r",
							"    console.log(\"dataPersona : \" + dataPersona);\r",
							"    pm.expect(dataPersona).to.eql(6);        \r",
							"    //*******************************************************\r",
							"\r",
							"});\r",
							"\r",
							"//26.\r",
							"pm.test(\"26. Validación: El objeto ind_lego_basico contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_basico = Object.keys(jsonResponse.data[0].persona.ind_lego_basico).length;\r",
							"    console.log(\"lego_basico: \" + lego_basico);\r",
							"    pm.expect(lego_basico).to.eql(37); \r",
							"\r",
							"});\r",
							"\r",
							"//27.\r",
							"pm.test(\"27. Validación: El objeto ind_lego_contacto contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_contacto = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto).length;\r",
							"    console.log(\"lego_contacto: \" + lego_contacto);\r",
							"    pm.expect(lego_contacto).to.eql(3); \r",
							"\r",
							"    //**************************    domicilio   ****************\r",
							"    var domicilio = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.domicilio).length;\r",
							"    console.log(\"domicilio: \" + domicilio);\r",
							"    pm.expect(domicilio).to.eql(2); \r",
							"\r",
							"    //**************************    domicilio [0]   ****************\r",
							"    var dom_objeto_cero = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.domicilio[0]).length;\r",
							"    console.log(\"dom_objeto_cero: \" + dom_objeto_cero);\r",
							"    pm.expect(dom_objeto_cero).to.eql(17); \r",
							"\r",
							"    //**************************    domicilio [1]   ****************\r",
							"    var dom_objeto_uno = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.domicilio[1]).length;\r",
							"    console.log(\"dom_objeto_uno: \" + dom_objeto_uno);\r",
							"    pm.expect(dom_objeto_uno).to.eql(17); \r",
							"\r",
							"     //**************************    email   ****************\r",
							"    var email = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.email).length;\r",
							"    console.log(\"email: \" + email);\r",
							"    pm.expect(email).to.eql(0); \r",
							"\r",
							"      //**************************    telefono   ****************\r",
							"    var telefono = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.telefono).length;\r",
							"    console.log(\"telefono: \" + telefono);\r",
							"    pm.expect(telefono).to.eql(2); \r",
							"\r",
							"      //**************************    telefono [0]   ****************\r",
							"    var tel_object_cero = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.telefono[0]).length;\r",
							"    console.log(\"tel_object_cero: \" + tel_object_cero);\r",
							"    pm.expect(tel_object_cero).to.eql(5);\r",
							"    \r",
							"\r",
							"      //**************************    telefono [1]   ****************\r",
							"    var tel_object_uno = Object.keys(jsonResponse.data[0].persona.ind_lego_contacto.telefono[1]).length;\r",
							"    console.log(\"tel_object_uno: \" + tel_object_uno);\r",
							"    pm.expect(tel_object_uno).to.eql(5); \r",
							"\r",
							"});\r",
							"\r",
							"//28.\r",
							"pm.test(\"28. Validación: El objeto ind_lego_segmentadores contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_segmentadores = Object.keys(jsonResponse.data[0].persona.ind_lego_segmentadores).length;\r",
							"    console.log(\"lego_segmentadores: \" + lego_segmentadores);\r",
							"    pm.expect(lego_segmentadores).to.eql(23); \r",
							"\r",
							"});\r",
							"\r",
							"//29.\r",
							"pm.test(\"29. Validación: El objeto ind_lego_riesgo contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_riesgo = Object.keys(jsonResponse.data[0].persona.ind_lego_riesgo).length;\r",
							"    console.log(\"lego_riesgo: \" + lego_riesgo);\r",
							"    pm.expect(lego_riesgo).to.eql(9); \r",
							"\r",
							"});\r",
							"\r",
							"//30.\r",
							"pm.test(\"30. Validación: El objeto ind_lego_banco contenga los obejetos y datos correctos \", function()\r",
							"{\r",
							"    // **********************\r",
							"    var lego_banco = Object.keys(jsonResponse.data[0].persona.ind_lego_banco).length;\r",
							"    console.log(\"lego_banco: \" + lego_banco);\r",
							"    pm.expect(lego_banco).to.eql(6); \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"search\": [\r\n        {\r\n            \"id_objeto\": 33746,\r\n            \"id_tipo_objeto\": 1,\r\n            \"indicadores\": {\r\n                \"ind_individuo\": true,\r\n                \"ind_individuo_rol\": true,\r\n                \"ind_individuo_telefono\": true,\r\n                \"ind_individuo_direccion\": true,\r\n                \"ind_individuo_identificador\": true,\r\n                \"ind_individuo_aviso_privacidad\": true,\r\n                \"ind_individuo_pld\": true,\r\n                \"ind_individuo_segmentadores\": true,\r\n                \"ind_individuo_red_social\": true,\r\n                \"ind_individuo_referencias\": true,\r\n                \"ind_lego_minimo\": true,\r\n                \"ind_lego_basico\": true,\r\n                \"ind_lego_contacto\": true,\r\n                \"ind_lego_segmentadores\": true,\r\n                \"ind_lego_riesgo\": true,\r\n                \"ind_lego_banco\": true,\r\n                \"ind_lego_cuenta_otro_banco\": false\r\n            }\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/individuos/retrieve-information?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"individuos",
						"retrieve-information"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Crea Evento INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"\r",
							"//setTimeout(() => {}, 30000)\r",
							"postman.setNextRequest('Consulta Visitante Proceso INT');\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El objeto data contenga 6 obejetos, y campos correctos.\", function()\r",
							"{\r",
							"    var data_event = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"data_event: \" + data_event);\r",
							"    pm.expect(data_event).to.eql(6); \r",
							"    pm.expect({domicilio_visita:{}, fecha_visita: String, id_agenda: Number, rensponsable_visita_nomina: String, responsable_visita_nombre:String, responsable_visita_telefono:String})\r",
							"    .to.have.all.keys('domicilio_visita', 'fecha_visita', 'id_agenda', 'rensponsable_visita_nomina', 'responsable_visita_nombre', 'responsable_visita_telefono');\r",
							"});     \r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El objeto domicilio_visita contenga los campos correctos.\", function()\r",
							"{\r",
							"    var visit = Object.keys(jsonResponse.data.domicilio_visita).length;\r",
							"    console.log(\"visit: \" + visit);\r",
							"   pm.expect(visit).to.eql(15); \r",
							"   pm.expect({calle:String, codigo_postal: String, entre_calle_1: String, entre_calle_2: String, id_ciudad:String, id_colonia:String, id_entidad_federativa:String, id_municipio:String, id_pais:String, id_tipo_domicilio:Number, latitud:String, longitud:String, no_exterior:String, no_interior:String, referencia_de_ubicacion:String})\r",
							"   .to.have.all.keys('calle', 'codigo_postal', 'entre_calle_1', 'entre_calle_2', 'id_ciudad', 'id_colonia', 'id_entidad_federativa', 'id_municipio', 'id_pais', 'id_tipo_domicilio', 'latitud', 'longitud', 'no_exterior', 'no_interior', 'referencia_de_ubicacion');\r",
							"}); \r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El campo message contenga el mensaje correcto\", function(){\r",
							"    pm.expect(jsonResponse.message).to.eql(\"Otro\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id_proceso_venta\": {{ID_PROCESO_VENTA}},\r\n    \"id_persona\": {{ID_PERSONA}},\r\n    \"dtInicio\": \"2022-07-14T10:00:00-0500\",\r\n    \"usuario_autor_id\": \"83824\",\r\n    \"dtFin\": \"2022-07-14T11:00:00-0500\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/agenda/crea-evento?key={{token}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"agenda",
						"crea-evento"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta Visitante Proceso INT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonResponse = pm.response.json()\r",
							"setTimeout(() => {}, 5000);\r",
							"\r",
							"\r",
							"// 1.\r",
							"pm.test(\"1. Validación: Código de respuesta 200.\", function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2.\r",
							"pm.test(\"2. Validación: El objeto data contenga los obejetos, y campos correctos.\", function()\r",
							"{\r",
							"    var visitante = Object.keys(jsonResponse.data).length;\r",
							"    console.log(\"visitante: \" + visitante);\r",
							"    pm.expect(visitante).to.eql(1); \r",
							"    pm.expect({correo_electronico:String, id_individuo: Number, id_persona: Number, id_tipo_telefono: Number, ind_telefono_validado:Boolean, numero_telefono:String, primer_apellido:String, primer_nombre:String, proceso_venta:{}, segundo_apellido:String, segundo_nombre:String })\r",
							"   .to.have.all.keys('correo_electronico', 'id_individuo', 'id_persona', 'id_tipo_telefono', 'ind_telefono_validado', 'numero_telefono', 'primer_apellido', 'primer_nombre', 'proceso_venta', 'segundo_apellido', 'segundo_nombre');\r",
							"}); \r",
							"\r",
							"//3.\r",
							"pm.test(\"3. Validación: El objeto proceso_venta contenga los campos correctos.\", function()\r",
							"{\r",
							"    var proceso_venta = Object.keys(jsonResponse.data[0].proceso_venta).length;\r",
							"    console.log(\"proceso_venta: \" + proceso_venta);\r",
							"    pm.expect(proceso_venta).to.eql(13); \r",
							"    pm.expect({canal:String, estatus_esquema_descripcion: String, fecha_creacion: String, id_canal_entrada: Number, id_esquema:String, id_horario_contacto:null, id_motivo_status:String, id_proceso:String, id_proceso_venta:Number, id_status_esquema:String, motivo_status:String, origen:Number, tipo_proceso_venta:String})\r",
							"   .to.have.all.keys('canal', 'estatus_esquema_descripcion', 'fecha_creacion', 'id_canal_entrada', 'id_esquema', 'id_horario_contacto', 'id_motivo_status', 'id_proceso', 'id_proceso_venta', 'id_status_esquema', 'motivo_status', 'origen', 'tipo_proceso_venta');\r",
							"}); \r",
							"\r",
							"\r",
							"//4.\r",
							"pm.test(\"4. Validación: El objeto data contenga la información correcta en los campos.\", function()\r",
							"{\r",
							"  \r",
							"  pm.expect(jsonResponse.data[0].id_individuo).to.eql(pm.variables.get(\"ID_INDIVIDUO\"));  \r",
							"  pm.expect(jsonResponse.data[0].id_persona).to.eql(pm.variables.get(\"ID_PERSONA\"));   \r",
							"  pm.expect(jsonResponse.data[0].numero_telefono).to.eql(pm.variables.get(\"TELEFONO\"));   \r",
							"  pm.expect(jsonResponse.data[0].primer_apellido).to.eql(pm.variables.get(\"PRIMER_APELLIDO\"));   \r",
							"  pm.expect(jsonResponse.data[0].primer_nombre).to.eql(pm.variables.get(\"NOMBRE\"));\r",
							"  pm.expect(jsonResponse.data[0].proceso_venta.id_proceso_venta).to.eql(pm.variables.get(\"ID_PROCESO_VENTA\"));\r",
							"  pm.expect(jsonResponse.data[0].segundo_apellido).to.eql(pm.variables.get(\"SEGUNDO_APELLIDO\"));  \r",
							"  pm.expect(jsonResponse.data[0].segundo_nombre).to.eql(pm.variables.get(\"SEGUNDO_NOMBRE\"));\r",
							"}); \r",
							"\r",
							"//5.\r",
							"pm.test(\"5. Validación: El campo message contenga el mensaje correcto.\", function()\r",
							"{\r",
							"  \r",
							"  pm.expect(jsonResponse.message).to.eql(\"SUCCEEDED\");  \r",
							"  \r",
							"}); \r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{qa_prospeccion}}/api/prospeccion/consulta/visitante-proceso?key={{token}}&id_individuo={{ID_INDIVIDUO}}&id_proceso_venta={{ID_PROCESO_VENTA}}",
					"protocol": "https",
					"host": [
						"{{qa_prospeccion}}"
					],
					"path": [
						"api",
						"prospeccion",
						"consulta",
						"visitante-proceso"
					],
					"query": [
						{
							"key": "key",
							"value": "{{token}}"
						},
						{
							"key": "id_individuo",
							"value": "{{ID_INDIVIDUO}}"
						},
						{
							"key": "id_proceso_venta",
							"value": "{{ID_PROCESO_VENTA}}"
						}
					]
				}
			},
			"response": []
		}
	]
}